const MAX_PATH = 256;
const syscalls = @import("os/syscalls.n");
const string = @import("string.n");

fn proc_self_fd_path(fd: u32) |path_buf| [25]u8 {
    path_buf.* = std.mem.output(u8, "/proc/self/fd/".&, 14) ++ string.write_u32_decimal(fd);
}

fn fd_path(fd: u32) |out_buf| [MAX_PATH]u8 {
    const fd_symlink_path = proc_self_fd_path(fd);
    std.os.syscalls.readlink(
        @ptr_to_int(fd_symlink_path.&),
        @ptr_to_int(out_buf),
        MAX_PATH,
    );
}

fn dir_name(path: *const u8) |out_buf| [MAX_PATH]u8 {
    if (path.* == 0) {
        std.mem.copy(@int_to_ptr(*u8, @ptr_to_int(out_buf)), ".".&, 2);
        return;
    }
    var i = string.len(path) - 1;
    while(path[i] == '/') {
        i -= 1;
    }
    if(i == 0) {
        std.mem.copy(@int_to_ptr(*u8, @ptr_to_int(out_buf)), "/".&, 2);
        return;
    }
    while(path[i] != '/') {
        i -= 1;
    }
    if(i == 0) {
        std.mem.copy(@int_to_ptr(*u8, @ptr_to_int(out_buf)), ".".&, 2);
        return;
    }
    while(path[i] == '/') {
        i -= 1;
    }
    std.mem.copy(@int_to_ptr(*u8, @ptr_to_int(out_buf)), path, i + 1);
    out_buf.*[i + 1] = 0;
    return;
}

fn self_path() |out_buf| [MAX_PATH]u8 {
    std.os.syscalls.readlink(@ptr_to_int("/proc/self/exe".&), @ptr_to_int(out_buf), MAX_PATH);
}

fn self_dir() |out_buf| [MAX_PATH]u8 {
    const self = self_path();
    out_buf.* = dir_name(@int_to_ptr(@ptr_to_int(self.&)));
}
