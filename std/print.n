const syscalls = @import("os/syscalls.n");
const string = @import("string.n");

const MAX_BUF = 128;

var used: u64 = 0;
var buffer: [MAX_BUF]u8 = undefined;

fn flush() void {
    if(used != 0) {
        syscalls.write_all(1, buffer[0].&, used);
        used = 0;
    }
}

fn char(ch: u8) void {
    if(used == MAX_BUF) {
        flush();
    }
    buffer[used] = ch;
    used += 1;
}

fn unsigned_decimal(value: u64) void {
    const buf = std.string.write_u64_decimal(value);
    str(@int_to_ptr(*const u8, @ptr_to_int(buf.&)));
}

fn unsigned_hex_upper(value: u64) void {
    var shift: u64 = 64;
    loop {
        shift -= 4;
        char("0123456789ABCDEF".&[@truncate(u8, (value >> shift) & 0xF)]);
        if(shift == 0) {
            return;
        }
    }
}

fn log_hex_upper(s: *const u8, value: u64) void {
    str(s);
    str(": ".&);
    unsigned_hex_upper(value);
    char('\n');
}

fn str(s: *const u8) void {
    loop {
        if(s.* != 0) {
            char(s.*);
            s += 1;
        } else {
            return;
        }
    }
}
