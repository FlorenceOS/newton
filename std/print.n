const syscalls = @import("os/syscalls.n");

const MAX_BUF = 128;

var used: u64 = 0;
var buffer: [MAX_BUF]u8 = undefined;

fn flush() void {
    if(used != 0) {
        syscalls.write_all(1, buffer[0].&, used);
        used = 0;
    }
}

fn char(ch: u8) void {
    if(used == MAX_BUF) {
        flush();
    }
    buffer[used] = ch;
    used = used + 1;
}

fn unsigned_decimal(value: u64) void {
    const next = value / 10;
    if(next != 0) {
        unsigned_decimal(next);
    }
    char('0' + @truncate(u8, value % 10));
}

fn unsigned_hex_upper(value: u64) void {
    const next = value / 16;
    if(next != 0) {
        unsigned_hex_upper(next);
    }
    char("0123456789ABCDEF".&[@truncate(u8, value % 16)]);
}

fn log_hex_upper(s: *const u8, value: u64) void {
    str(s);
    str(": ".&);
    unsigned_hex_upper(value);
    char('\n');
}

fn str(s: *const u8) void {
    loop {
        if(s.* != 0) {
            char(s.*);
            s = s + 1;
        } else {
            return;
        }
    }
}
