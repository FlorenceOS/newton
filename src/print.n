const syscalls = @import("syscalls.n");

const MAX_BUF = 128;

var used: u64 = 0;
var buffer: [MAX_BUF]u8 = undefined;

fn flush() void {
    if(used != 0) {
        syscalls.write_all(1, buffer[0].&, used);
        used = 0;
    }
}

fn char(ch: u8) void {
    if(used == MAX_BUF) {
        flush();
    }
    buffer[used] = ch;
    used = used + 1;
}

fn decimal(comptime T: type, value: T) void {
    const next = value / 10;
    if(next != 0) {
        decimal(T, @truncate(u8, next));
    }
    char('0' + @truncate(u8, value % 10));
}

fn str(s: *const u8) void {
    loop {
        if(s.* == 0) {
            return;
        }
        char(s.*);
        s = s + 1;
    }
}
