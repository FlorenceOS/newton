const std = @import("std");

const MAX_ALIAS = 16;

const SourceFile = struct {
    file_data: *const u8,
    absolute_file_path: [std.os.MAX_PATH]u8,
    alias: [MAX_ALIAS]u8,
    file_fd: u32,
    dir_fd: u32,
    top_level_struct: u32,
};

var source_files: std.containers.PinnedVector(SourceFile, 0x1000) = undefined;

fn init() inline void {
    source_files.init();
}

fn open_file(dirfd: u32, filename: *const u8) u32 {
    const retval = source_files.add();
    const file_fd = @truncate(u32, std.os.syscalls.openat(dirfd, filename, 0, undefined));
    const dir_name = std.os.dir_name(filename);
    const dir_fd = @truncate(u32, std.os.syscalls.openat(dirfd, dir_name[0].&, 0, undefined));
    const padded_file_size = (std.os.syscalls.lseek(file_fd, 0, std.os.syscalls.SEEK.END) + 0x1000) & ~0xFFF;
    const data = std.os.syscalls.mmap(
        0,
        padded_file_size,
        std.os.syscalls.PROT.READ,
        std.os.syscalls.MAP.SHARED,
        file_fd,
        0,
    );
    std.os.syscalls.madvise(data, padded_file_size, std.os.syscalls.MADV.SEQUENTIAL);
    source_files.get(retval).* = .{
        .file_data = @int_to_ptr(*const u8, data),
        .absolute_file_path = std.os.fd_path(file_fd),
        .alias = std.mem.zeroes(u8, MAX_ALIAS),
        .file_fd = file_fd,
        .dir_fd = dir_fd,
        .top_level_struct = -1,
    };
    return retval;
}

fn add_named_file(dirfd: u32, filename: *const u8, alias: *const u8) u32 {
    const result = open_file(dirfd, filename);
    std.mem.copy(source_files.get(result).alias[0].&, alias, std.string.len(alias));
    return result;
}
