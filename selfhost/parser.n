const std = @import("std");

const builder = @import("builder.n");
const error = @import("error.n");

const NodeType = enum(u8) {
    // simple token expressions
    identifier,
    int_literal,
    string_literal,

    // if there is no token (-1), it is a file top-level struct
    // otherwise, token is the struct/enum/union token
    // payload: first declaration in body list
    container_expression,

    // idx - 1 is operand
    // uops
    addr_of,
    deref,
    unary_plus,
    unary_minus,
    unary_bitnot,
    unary_lognot,
    pointer_type,
    force_comptime_eval,
    discard,

    // keyword expressions
    continue_expr,
    undefined_expr,
    unreachable_expr,

    // idx - 1: condition
    // payload: list of branch nodes (1 - 2 in list, true cond first)
    @"if",

    // payload: loop body
    @"loop",

    // token is the keyword
    // payload is optional value
    return_expr,
    // for break specifically, if token + 1 is ':', then token + 2 is the block identifier to break
    break_expr,

    // payload: lhs
    // idx - 1: rhs
    // token is the binary operator
    binary,

    // payload: first argument, other arguments are siblings
    // idx - 1: callee
    // token is opening paren
    function_call,

    // payload: list of parameter decls followed by nodes in the block body
    // idx - 1: return type
    // token: end paren token (before attribute list)
    function_expression,

    // idx - 1: expression accessed
    // token: identifier accessed
    member_access,

    // token is var/const/fn token
    // token + 1 is identifier token
    // idx - 1: init expression
    // payload: type expression (optional)
    static_declaration,

    // token is identifier
    // idx - 1: type expression
    // payload: init expression (optional)
    field_declaration,

    // token is identifer (optional)
    // before token are any attribute keywords
    // idx - 1: type expression
    function_parameter_decl,

    // payload: first child node
    block,

    // token is var/const/fn token
    // token + 1 is identifier token
    // payload: type expression (optional)
    // idx - 1: init expression
    local_var_decl,
};

const MAX_NODES = 0x100000;

// AST Expressions
var node_type: std.containers.PinnedVector(NodeType, MAX_NODES) = undefined;
var node_token: std.containers.PinnedVector(u32, MAX_NODES) = undefined;
var node_payload: std.containers.PinnedVector(u32, MAX_NODES) = undefined;
var node_next: std.containers.PinnedVector(u32, MAX_NODES) = undefined;

fn init() inline void {
    node_type.init();
    node_token.init();
    node_payload.init();
    node_next.init();
}

fn add_with_token(tok: u32, tag: NodeType) u32 {
    const retval = node_type.size();
    node_type.append_assume_capacity(tag);
    node_token.append_assume_capacity(tok);
    node_payload.add();
    node_next.add();
    return retval;
}

const ParserContext = struct {
    current_token: u32,
    end_token: u32,

    fn advance(self: *@This()) inline u32 {
        const retval = self.current_token;
        self.current_token = retval + 1;
        return retval;
    }

    fn add_advance(self: *@This(), tag: NodeType) inline u32 {
        return add_with_token(self.advance(), tag);
    }

    fn peek(self: *@This()) inline tokenizer.TokenType {
        return tokenizer.token_type.get(self.current_token).*;
    }

    fn report_error(self: *@This(), message: *const u8) inline noreturn {
        tokenizer.report_error_at_token(self.current_token, message);
    }

    fn expect(self: *@This(), error_message: *const u8, expected: tokenizer.TokenType) u32 {
        if(self.peek() == expected) {
            return self.advance();
        } else {
            self.report_error(error_message);
        }
    }
};

fn parse_statement(context: *ParserContext) u32 {
    const p = context.peek();
    if(p == .const_keyword || p == .var_keyword) {
        const token = context.advance();
        context.expect("Expected local variable name".&, .identifier);
        var type_expr: u32 = undefined;
        if(context.peek() == .@":") {
            context.advance();
            type_expr = parse_expression_with_precedence(context, true, 0);
        } else {
            type_expr = -1;
        }
        context.expect("Expected '=' after variable declaration".&, .@"=");
        parse_expression(context);
        context.expect("Expected ';' after variable initialization".&, .@";");
        const result = add_with_token(token, .local_var_decl);
        node_payload.get(result).* = type_expr;
        return result;
    }
    else if(p == .__keyword) {
        const token = context.advance();
        context.expect("Expected '=' after '_'".&, .@"=");
        parse_expression(context);
        context.expect("Expected ';' after expression to discard".&, .@";");
        return add_with_token(token, .discard);
    }
    else {
        const result = parse_expression(context);
        context.expect("Expected ';' after expression statement".&, .@";");
        return result;
    }
}

fn parse_block_body(context: *ParserContext) u32 {
    var stmts = builder.Builder{};
    loop(context.peek() != .@"}") {
        stmts.add(parse_statement(context), node_next.ptr());
    }
    return stmts.head;
}

fn parse_block(context: *ParserContext) u32 {
    context.expect("Expected '{' to start block statement".&, .@"{");
    const result = parse_block_body(context);
    context.expect("Expected '}' to start block statement".&, .@"}");
    return result;
}

fn parse_function_expression(context: *ParserContext) u32 {
    context.expect("Expected '(' before parameter list".&, .@"(");
    var stmt_builder = builder.Builder{};
    loop(context.peek() != .@")") {
        if(context.peek() == .comptime_keyword) {
            context.advance();
        }
        var ident: u32 = -1;
        if(context.peek() == .identifier) {
            ident = context.advance();
        }
        if(node_type.get(ident).* == .identifier && context.peek() == .@":") {
            context.advance();
            parse_expression(context);
        } else {
            ident = -1;
        }
        const decl = add_with_token(ident, .function_parameter_decl);
        stmt_builder.add(decl, node_next.ptr());
        if(context.peek() == .@",") {
            context.advance();
        } else {
            break;
        }
    }
    const end_paren_tok = context.expect("Expected ')' after parameter list".&, .@")");
    if(context.peek() == .inline_keyword) {
        context.advance();
    }
    if(context.peek() == .@"|") {
        context.advance();
        context.expect("Expected return location binding name after '|'".&, .identifier);
        context.expect("Expected '|' after return location binding name".&, .@"|");
    }
    _ = parse_expression_with_precedence(context, true, 0);
    const result = add_with_token(end_paren_tok, .function_expression);
    if(context.peek() == .@"{") {
        stmt_builder.append_list(parse_block(context), node_next.ptr());
    }
    node_payload.get(result).* = stmt_builder.head;
    return result;
}

fn parse_primary_expression(context: *ParserContext, require: bool, precedence: u32) u32 {
    const p = context.peek();

    if(p == .identifier) {
        if(tokenizer.token_type.get(context.current_token + 1).* == .@":") {
            context.current_token += 2;
            const result = add_with_token(context.current_token, .block);
            node_payload.get(result).* = parse_block(context);
            return result;
        }
        return context.add_advance(.identifier);
    }
    else if(p == .int_literal) {
        return context.add_advance(.int_literal);
    }
    else if(p == .string_literal) {
        return context.add_advance(.string_literal);
    }
    else if(p == .fn_keyword) {
        context.advance();
        return parse_function_expression(context);
    }
    else if(p == .break_keyword) {
        const retval = context.add_advance(.break_expr);
        if(context.peek() == .@":") {
            context.advance();
            context.expect("Expected identifier after ':' in break expression".&, .identifier);
        }
        node_payload.get(retval).* = parse_expression_with_precedence(context, false, precedence);
        return retval;
    }
    else if(p == .return_keyword) {
        const retval = context.add_advance(.return_expr);
        node_payload.get(retval).* = parse_expression_with_precedence(context, false, precedence);
        return retval;
    }
    else if(p == .continue_keyword) {
        return context.add_advance(.continue_expr);
    }
    else if(p == .undefined_keyword) {
        return context.add_advance(.undefined_expr);
    }
    else if(p == .unreachable_keyword) {
        return context.add_advance(.unreachable_expr);
    }
    else if(p == .if_keyword) {
        const token = context.advance();
        context.expect("Expected '(' after 'if'".&, .@"(");
        parse_expression(context);
        const result = add_with_token(token, .@"if");
        context.expect("Expected ')' after if condition".&, .@")");
        var branch_builder = builder.Builder{};
        branch_builder.add(parse_expression(context), node_next.ptr());
        if(context.peek() == .else_keyword) {
            branch_builder.add(parse_expression(context), node_next.ptr());
        }
        node_payload.get(result).* = branch_builder.head;
        return result;
    }
    else if(p == .loop_keyword) {
        const result = context.add_advance(.@"loop");
        node_payload.get(result).* = parse_block(context);
        return result;
    }
    else if(p == .@"{") {
        const result = add_with_token(context.current_token, .block);
        node_payload.get(result).* = parse_block(context);
        return result;
    }
    else if(p == .@"+") {
        const plus_tok = context.advance();
        _ = parse_primary_expression(context, true, precedence);
        return add_with_token(plus_tok, .unary_plus);
    }
    else if(p == .@"-") {
        const minus_tok = context.advance();
        _ = parse_primary_expression(context, true, precedence);
        return add_with_token(minus_tok, .unary_minus);
    }
    else if(p == .@"~") {
        const bitnot_tok = context.advance();
        _ = parse_primary_expression(context, true, precedence);
        return add_with_token(bitnot_tok, .unary_bitnot);
    }
    else if(p == .@"*") {
        context.report_error("TOOD: Pointer types".&);
    }
    else if(p == .comptime_keyword) {
        const comptime_tok = context.advance();
        _ = parse_primary_expression(context, true, precedence);
        return add_with_token(comptime_tok, .force_comptime_eval);
    }
    else {
        if(require) {
            context.report_error("Expected primary expression".&);
        } else {
            return -1;
        }
    }
}

fn parse_primary_with_postfix(context: *ParserContext, require: bool, precedence: u32) u32 {
    var result = parse_primary_expression(context, require, precedence);
    if(result == -1) {
        return result;
    }

    loop {
        var p = context.peek();
        if(p == .@".") {
            context.advance();
            p = context.peek();
            if(p == .@"&") {
                context.add_advance(.addr_of);
            }
            else if(p == .@"*") {
                context.add_advance(.deref);
            }
            else if(p == .identifier) {
                context.add_advance(.member_access);
            }
            else {
                context.report_error("Expected postfix token after '.'".&);
            }
        }
        else if(p == .@"(") {
            result = context.add_advance(.function_call);
            var argument_builder = builder.Builder{};
            loop(context.peek() != .@")") {
                argument_builder.add(parse_expression(context), node_next.ptr());
                if(context.peek() == .@",") {
                    context.advance();
                } else {
                    break;
                }
            }
            context.expect("Expected ')' after argument list".&, .@")");
            node_payload.get(result).* = argument_builder.head;
        }
        else {
            return result;
        }
    }
}

fn parse_expression_with_precedence(context: *ParserContext, require: bool, precedence: u32) u32 {
    var lhs = parse_primary_with_postfix(context, require, precedence);
    if(lhs == -1) {
        return lhs;
    }

    // Binary operators
    loop {
        const p = context.peek();

        var operator_precedence: u32 = undefined;

        if(p == .@"*" || p == .@"/" || p == .@"%") {
            operator_precedence = 3;
        }
        else if(p == .@"+" || p == .@"-" || p == .@"++") {
            operator_precedence = 4;
        }
        else if(p == .@"<<" || p == .@">>") {
            operator_precedence = 5;
        }
        else if(p == .@"&" || p == .@"^" || p == .@"|") {
            operator_precedence = 6;
        }
        else if(p == .@"==" || p == .@"!=" || p == .@"<" || p == .@"<=" || p == .@">" || p == .@">=") {
            operator_precedence = 7;
        }
        else if(p == .@"&&" || p == .@"||") {
            operator_precedence = 8;
        }
        else if(p == .@"..") {
            operator_precedence = 9;
        }
        else if(p == .@"=" || p == .@"++=" || p == .@"+=" || p == .@"-=" || p == .@"*=" || p == .@"/=" || p == .@"%=" || p == .@"|=" || p == .@"^=" || p == .@"&=" || p == .@"<<=" || p == .@">>=") {
            operator_precedence = 10;
        }
        else {
            return lhs;
        }

        if(operator_precedence > precedence) {
            return lhs;
        }
        // (prec == 10) <=> (assoc == rtl)
        if(operator_precedence == precedence && operator_precedence != 10) {
            return lhs;
        }

        const operand_token = context.advance();
        const old_lhs = lhs;
        _ = old_lhs.&; // Hack to put old_lhs on stack, we're out of registers
        _ = parse_expression_with_precedence(context, true, operator_precedence);
        lhs = add_with_token(operand_token, .binary);
        node_payload.get(lhs).* = old_lhs;
    }
}

fn parse_expression(context: *ParserContext) inline u32 {
    return parse_expression_with_precedence(context, true, 99);
}

fn parse_container_body(context: *ParserContext) u32 {
    var decl_builder = builder.Builder{};

    loop {
        const p = context.peek();

        if(p == .identifier) {
            context.report_error("TODO: Container field".&);
        }
        else if(p == .const_keyword || p == .var_keyword) {
            const token = context.advance();
            context.expect("Expected identifier for static declaration".&, .identifier);
            var type_expr: u32 = undefined;
            if(context.peek() == .@":") {
                context.advance();
                type_expr = parse_expression_with_precedence(context, true, 0);
            } else {
                type_expr = -1;
            }
            context.expect("Expected '=' in static decl".&, .@"=");
            parse_expression(context);
            context.expect("Expected ';' after static decl".&, .@";");
            const decl = add_with_token(token, .static_declaration);
            node_payload.get(decl).* = type_expr;
            decl_builder.add(decl, node_next.ptr());
        }
        else if(p == .fn_keyword) {
            const token = context.advance();
            context.expect("Expected identifier for fn decl".&, .identifier);
            parse_function_expression(context);
            const decl = add_with_token(token, .static_declaration);
            node_payload.get(decl).* = -1;
            decl_builder.add(decl, node_next.ptr());
        }
        else if(p == .@"}" || p == .end_of_file) {
            return decl_builder.head;
        }
        else {
            context.report_error("Unexpected token in container body".&);
        }
    }
}

fn parse_file(file: u32) u32 {
    var context: ParserContext = undefined;
    context.current_token = tokenizer.token_type.size();
    tokenizer.tokenize_file(file);
    context.end_token = tokenizer.token_type.size();
    const toplevel = add_with_token(-1, .container_expression);
    const first_decl = parse_container_body(context.&);
    node_payload.get(toplevel).* = first_decl;
    return toplevel;
}
